// minimal tree shaping to avoid interfering with reconstruction (this might be optimizable)

// basic tokens
id: /[a-zA-Z_$]([a-zA-Z0-9_.])*/

COLON_TOK: ":"
LEFT_BRACE_TOK: "{"
RIGHT_BRACE_TOK: "}"
LEFT_BRACKET_TOK: "["
RIGHT_BRACKET_TOK: "]"
LEFT_PARANTHESES_TOK: "("
RIGHT_PARANTHESES_TOK: ")"
ASSIGNMENT_TOK: "="
NEWLINE_TOK: NEWLINE

start: NEWLINE* system_declaration (NEWLINE_TOK+ _declaration)+ (NEWLINE_TOK | NEWLINE)*

// declarations
_declaration: process_declaration
          | event_declaration
          | clock_declaration
          | int_declaration
          | location_declaration
          | edge_declaration
          | sync_declaration

system_declaration: SYSTEM_TOK COLON_TOK id attributes? 
SYSTEM_TOK: "system"

process_declaration: PROCESS_TOK COLON_TOK id attributes? 
PROCESS_TOK: "process"

event_declaration: EVENT_TOK COLON_TOK id attributes? 
EVENT_TOK: "event"

clock_declaration: CLOCK_TOK COLON_TOK INT COLON_TOK id attributes? 
CLOCK_TOK: "clock"

int_declaration: INT_TOK COLON_TOK INT COLON_TOK SIGNED_INT COLON_TOK SIGNED_INT COLON_TOK SIGNED_INT COLON_TOK id attributes? 
INT_TOK: "int"

location_declaration: LOCATION_TOK COLON_TOK id COLON_TOK id attributes? 
LOCATION_TOK: "location"

edge_declaration: EDGE_TOK COLON_TOK id COLON_TOK id COLON_TOK id COLON_TOK id attributes? 
EDGE_TOK: "edge"

sync_declaration: SYNC_TOK COLON_TOK sync_constraints attributes? 
SYNC_TOK: "sync"

sync_constraints: sync_constraint (COLON_TOK sync_constraint)+

sync_constraint: id AT_TOK id QUESTION_MARK_TOK?
AT_TOK: "@"
QUESTION_MARK_TOK: "?"

attributes: LEFT_BRACE_TOK (_attribute (COLON_TOK _attribute)*)? RIGHT_BRACE_TOK

_attribute: initial_attribute
         | labels_attribute
         | invariant_attribute
         | committed_attribute
         | urgent_attribute
         | provided_attribute
         | do_attribute
         | custom_attribute
        //  | "layout" COLON_TOK SIGNED_INT "," SIGNED_INT

custom_attribute: id COLON_TOK ESCAPED_STRING // ?

initial_attribute: INITIAL_TOK COLON_TOK
INITIAL_TOK: "initial"

labels_attribute: LABELS_TOK COLON_TOK id ("," id)*
LABELS_TOK: "labels"

invariant_attribute: INVARIANT_TOK COLON_TOK expr
INVARIANT_TOK: "invariant"

committed_attribute: COMMITTED_TOK COLON_TOK
COMMITTED_TOK: "committed"

urgent_attribute: URGENT_TOK COLON_TOK
URGENT_TOK: "urgent"

provided_attribute: PROVIDED_TOK COLON_TOK expr
PROVIDED_TOK: "provided"

do_attribute: DO_TOK COLON_TOK stmt
DO_TOK: "do"

// expressions
expr: LEFT_PARANTHESES_TOK atomic_expr (LOGICAL_AND_TOK atomic_expr)* RIGHT_PARANTHESES_TOK
    | atomic_expr (LOGICAL_AND_TOK atomic_expr)*
LOGICAL_AND_TOK: "&&"

atomic_expr: LEFT_PARANTHESES_TOK atomic_expr RIGHT_PARANTHESES_TOK
           | LOGICAL_NOT_TOK atomic_expr
           | predicate_expr
           | clock_expr
           | int_term
LOGICAL_NOT_TOK: "!"

predicate_expr: int_term _cmp int_term
              | int_term _less_cmp int_term _less_cmp int_term

int_id: id (LEFT_BRACKET_TOK int_term RIGHT_BRACKET_TOK)?

int_term: LEFT_PARANTHESES_TOK int_term RIGHT_PARANTHESES_TOK
        | SIGNED_INT
        | OP_SUB_TOK int_term
        | int_term op int_term 
        | int_id 

op: OP_ADD_TOK | OP_SUB_TOK | OP_MULT_TOK | OP_DIV_TOK | OP_MOD_TOK
OP_ADD_TOK: "+"
OP_SUB_TOK: "-"
OP_MULT_TOK: "*"
OP_DIV_TOK: "/"
OP_MOD_TOK: "%"

// clock expressions
clock_expr: clock_term _clock_cmp int_term
          | int_term _clock_cmp clock_term
          | int_term _less_cmp clock_term _less_cmp int_term

clock_term: clock_id (OP_SUB_TOK clock_id)?

clock_id: id (LEFT_BRACKET_TOK int_term RIGHT_BRACKET_TOK)?

_cmp: CMP_NEQ_TOK | _clock_cmp
_clock_cmp : CMP_EQ_TOK | CMP_GEQ_TOK | CMP_GT_TOK | _less_cmp
_less_cmp: CMP_LEQ_TOK | CMP_LT_TOK
CMP_NEQ_TOK: "!="
CMP_EQ_TOK: "=="
CMP_GEQ_TOK: ">="
CMP_GT_TOK: ">"
CMP_LEQ_TOK: "<="
CMP_LT_TOK: "<"

// statements
stmt: _statement (SEMICOLON_TOK _statement)*
SEMICOLON_TOK: ";"

_statement: _simple_statement
         | if_statement
         | while_statement

_simple_statement: int_assignment
                | clock_assignment
                | local_statement
                | nop
nop: NOP_TOK
NOP_TOK: "nop"

if_statement: IF_TOK expr THEN_TOK stmt (ELSE_TOK stmt)? END_TOK
while_statement: WHILE_TOK expr DO_TOK stmt END_TOK
IF_TOK: "if"
THEN_TOK: "then"
ELSE_TOK: "else"
END_TOK: "end"
WHILE_TOK: "while"

int_assignment: int_id ASSIGNMENT_TOK int_term

clock_assignment: clock_id ASSIGNMENT_TOK int_term (OP_ADD_TOK clock_id)?

local_statement: LOCAL_TOK id (LEFT_BRACKET_TOK int_term RIGHT_BRACKET_TOK)?
               | LOCAL_TOK id ASSIGNMENT_TOK int_term
LOCAL_TOK: "local"

COMMENT: "#" /[^\n]*/ NEWLINE

%import common.SIGNED_INT
%import common.INT
%import common.ESCAPED_STRING
%import common.WS_INLINE
%import common.NEWLINE

%ignore WS_INLINE
%ignore COMMENT